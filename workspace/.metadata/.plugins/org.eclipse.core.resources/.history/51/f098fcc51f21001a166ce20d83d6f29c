package com.techelevator.controller;

import com.techelevator.authentication.AuthProvider;
import com.techelevator.authentication.UnauthorizedException;
import com.techelevator.model.User;
import com.techelevator.model.UserDao;
import com.techelevator.sociemoti.choices.Choices;
import com.techelevator.sociemoti.choices.ChoicesDAO;
import com.techelevator.sociemoti.frames.Frames;
import com.techelevator.sociemoti.frames.FramesDAO;
import com.techelevator.sociemoti.scenarios.Scenarios;
import com.techelevator.sociemoti.scenarios.ScenariosDAO;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

/**
 * ApiController
 */
@CrossOrigin
@RestController
@RequestMapping("/api")
public class ApiController {

    @Autowired
    private AuthProvider authProvider;
    
    @Autowired
    private ScenariosDAO scenariosDAO;
    
    @Autowired 
    private FramesDAO framesDAO;
    
    @Autowired 
    private ChoicesDAO choicesDAO;
    
    @Autowired
    private UserDao userDAO;

    @RequestMapping(path = "/", method = RequestMethod.GET)
    public String authorizedOnly() throws UnauthorizedException {
        /*
        You can lock down which roles are allowed by checking
        if the current user has a role.
        
        In this example, if the user does not have the admin role
        we send back an unauthorized error.
        
        **we MAY need to alter this to allow unregistered users to reg as a student
        */
        if (!authProvider.userHasRole(new String[] { "admin" })) {
            throw new UnauthorizedException();
        }
        return "Success";
    }
    
    @GetMapping("/scenario")
    public List<Scenarios> listScenarios() {
    	return scenariosDAO.list();
    }
    @GetMapping("/scenario/{id}")
    public Scenarios getScenario(@PathVariable int id) {
    	Scenarios scenarios = scenariosDAO.getScenarioById(id); 
    	scenarios.setFrames(framesDAO.listFramesByScenarioId(scenarios.getId()));
    	scenarios.getFrames().forEach(frame->{
		if(frame.isFirstFrame()) {
			frame.setChoices(choicesDAO.listChoicesByFrameId(frame.getId()));
		}
	});
   
    	return scenarios;
    	 
    }
    @GetMapping("/frames/{id}") 
    public List<Frames> listFramesByScenarioId(@PathVariable int id) {
    	return framesDAO.listFramesByScenarioId(id);
    }
    @GetMapping("/first-frame/{id}") 
    public Frames getFirstFrame(@PathVariable int id) {
    	return framesDAO.getFirstFrame(id);
    }
    @GetMapping("/choices/{id}") 
    public List<Choices> listChoicesByFrameId(@PathVariable int id) {
    	return choicesDAO.listChoicesByFrameId(id);
    }
    
    @GetMapping("/admin")
    public List<User> getAllUsers() {
    	return userDAO.getAllUsers();
    }
    @PutMapping("/admin/{userName}")
    public void changeRole( @RequestBody String role, @PathVariable String userName) {
    	userDAO.changeRole(role, userName);
    }
     @PutMapping("/admin/users/{id}/password")
     public void changePassword(@RequestBody String newPassword, @PathVariable int id) {
    	 User user = new User();
    	 user.setId(id);
    	 userDAO.changePassword(user, newPassword);
     }
    
    
     
    
    
    
    
    
    
    
    
}